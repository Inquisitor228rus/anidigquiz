[gd_scene load_steps=7 format=2]

[ext_resource path="res://src/scenes/Options/UIOptions/UIResolutionSelector.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/scenes/Options/UIOptions/UISettingsCheckbox.tscn" type="PackedScene" id=2]
[ext_resource path="res://src/scenes/Options/UIOptions/UINumberBox.tscn" type="PackedScene" id=3]
[ext_resource path="res://font/light_dynamicfont.tres" type="DynamicFont" id=4]
[ext_resource path="res://src/scenes/Options/UIOptions/UILanguageSelector.tscn" type="PackedScene" id=5]

[sub_resource type="GDScript" id=1]
script/source = "# User interface that allows the player to select game settings.
# To see how we update the actual window and rendering settings, see
# `Main.gd`.
extends Control

# Emitted when the user presses the \"apply\" button.
signal apply_button_pressed(settings)

#get current settings

var currentRes = OS.window_size
var realScreen := OS.get_screen_size()
var GameResolution
const language_map = {0: \"en\", 1: \"ru\", 2: \"pr\", 3: \"uk\"}
#onready var loadSettings = \"/root/Settings\"


func screen_metrics():
	print(\"                 [Screen Metrics]\")
	#print(\"            Display size: \", OS.get_screen_size())
	#print(\"   Decorated Window size: \", OS.get_real_window_size())
	#print(\"             Window size: \", OS.get_window_size())
	#print(\"        Project Settings: Width=\", ProjectSettings.get_setting(\"display/window/size/width\"), \" Height=\", ProjectSettings.get_setting(\"display/window/size/height\")) 
	#print(OS.get_window_size().x)
	#print(OS.get_window_size().y)
	
	#print(realScreen)
	#print(typeof(loadSettings.SettingsSecondsOfOp))
	#print(loadSettings.SettingsResW)
	#print(loadSettings.SettingsResH)
	#print(loadSettings.SettingsSecondsOfOp)

#var currentResolution1 := OS.set_window_size[0]
#var currentResolution2 := OS.set_window_size[1]

func uniLoadConfig(section, key): # уникальная функция для вызова подобных штук. хоть их и требуется всего два но все же.
	var SAVE_PATH = \"user://config.ini\"
	var config = ConfigFile.new()
	config.load(SAVE_PATH)
	return config.get_value(section, key)

func checkSettings():
	if (get_node(\"/root/Settings\").startupConfg()):
		#$MarginContainer/VBoxContainer/UINumberBox/SpinBox.value = uniLoadConfig(\"Game\", \"QuizTime\" )
		$MarginContainer/VBoxContainer/UINumberBox/SpinBox.value = Settings.QuizTime
	else:
		$MarginContainer/VBoxContainer/UINumberBox/SpinBox.value = 15

func checkLanguage():
	for lang in language_map.size():
		if TranslationServer.get_locale() == language_map.get(lang):
			$MarginContainer/VBoxContainer/UILanguageSelector/OptionButton.select(lang)

func _ready():
	$MarginContainer/VBoxContainer/UIFullScreenCheckbox/CheckBox.pressed = OS.window_fullscreen
	$MarginContainer/VBoxContainer/UIVSyncsCheckbox2/CheckBox.pressed = OS.vsync_enabled
	checkLanguage()
	checkSettings()
#	print(Settings.SettingsResW)
	#loadSettings.load_settings(SettingsSecondsOfOp)
	#screen_metrics()

# We store the selected settings in a dictionary

#onready var _settings := {resolution = Vector2(1280, 720), fullscreen = loadSettings.SettingsFullscreen, vsync = loadSettings.SettingsVsync, SettingsSecondsOfOp = loadSettings.SettingsSecondsOfOp}

# Emit the `apply_button_pressed` signal, when user presses the button.
func _on_ApplyButton_pressed() -> void:
	# Send the last selected settings with the signal
	#fullscreenCheck()
	emit_signal(\"apply_button_pressed\", _settings)
	#loadSettings.save_settings()


		

onready var _settings := { fullscreen = OS.window_fullscreen, vsync = OS.vsync_enabled, QuizTime = 15, lang = TranslationServer.get_locale()}
#onready var _settings := {resolution = Vector2(1280,720), fullscreen = OS.window_fullscreen, vsync = OS.vsync_enabled}#, QuizTime = QuizTimeTemp}
#onready var _settings := {resolution = (
#	OS.get_locale_language()
#	realScreen if OS.window_fullscreen == true
#	else Vector2(1280,720)
#), fullscreen = OS.window_fullscreen, vsync = OS.vsync_enabled}#, SettingsSecondsOfOp = value_changed}


# Store the resolution selected by the user. As this function is connected
# to the `resolution_changed` signal, this will be executed any time the
# users chooses a new resolution
func _on_UIResolutionSelector_resolution_changed(new_resolution: Vector2) -> void:
	_settings.resolution = new_resolution


# Store the fullscreen setting. This will be called any time the users toggles
# the UIFullScreenCheckbox
func _on_UIFullScreenCheckbox_toggled(is_button_pressed: bool) -> void:
	_settings.fullscreen = is_button_pressed
#	if (is_button_pressed):
#		_settings.resolution = realScreen
#	else:
#		_settings.resolution = Vector2(1280,720)
	#loadSettings.SettingsFullscreen = is_button_pressed


# Store the vsync seting. This will be called any time the users toggles
# the UIVSyncCheckbox
func _on_UIVSyncsCheckbox2_toggled(is_button_pressed: bool) -> void:
	_settings.vsync = is_button_pressed
	#loadSettings.SettingsVsync = is_button_pressed


func _on_QuitButton_pressed():
	get_tree().change_scene(\"res://src/scenes/MainMenu/Menu.tscn\") # переключение сцены сразу в главное меню. Menu.tscn


func _on_DegubSettings_toggled(is_button_pressed: bool) -> void:
	pass # Replace with function body.


func _on_UINumberBox_changed(value_changed: int) -> void:
	_settings.QuizTime = value_changed
	#loadSettings.SettingsSecondsOfOp = value_changed

func _on_OpenFolder_pressed():
	OS.shell_open(ProjectSettings.globalize_path(\"user://\"))


func _on_ResetSettings_pressed():
	_settings.resolution = Vector2(1280,720)
	_settings.fullscreen = false
	_settings.vsync = true
	_settings.QuizTime = 15
	_settings.lang = OS.get_locale_language()
	emit_signal(\"apply_button_pressed\", _settings)
	$MarginContainer/VBoxContainer/UIFullScreenCheckbox/CheckBox.pressed = OS.window_fullscreen
	$MarginContainer/VBoxContainer/UIVSyncsCheckbox2/CheckBox.pressed = OS.vsync_enabled


func _on_UILanguageSelector_language_changed(index):
	TranslationServer.set_locale(language_map[index])
	_settings.lang = language_map[index]
	
"

[node name="UIVideoSettings" type="Panel"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -317.0
margin_top = -288.0
margin_right = 317.0
margin_bottom = 288.0
script = SubResource( 1 )

[node name="MarginContainer" type="MarginContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 28
custom_constants/margin_top = 28
custom_constants/margin_left = 28
custom_constants/margin_bottom = 28

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
margin_left = 28.0
margin_top = 28.0
margin_right = 606.0
margin_bottom = 548.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3
size_flags_vertical = 3
alignment = 1

[node name="Label" type="Label" parent="MarginContainer/VBoxContainer"]
margin_right = 578.0
margin_bottom = 34.0
custom_fonts/font = ExtResource( 4 )
text = "OPTIONS"
align = 1

[node name="HSeparator" type="HSeparator" parent="MarginContainer/VBoxContainer"]
margin_top = 38.0
margin_right = 578.0
margin_bottom = 42.0

[node name="UIResolutionSelector" parent="MarginContainer/VBoxContainer" instance=ExtResource( 1 )]
visible = false
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 46.0
margin_right = 578.0
margin_bottom = 86.0

[node name="UIFullScreenCheckbox" parent="MarginContainer/VBoxContainer" instance=ExtResource( 2 )]
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 46.0
margin_right = 578.0
margin_bottom = 88.0
size_flags_horizontal = 3
title = "OPTIONS_FS"

[node name="UIVSyncsCheckbox2" parent="MarginContainer/VBoxContainer" instance=ExtResource( 2 )]
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 92.0
margin_right = 578.0
margin_bottom = 134.0
title = "OPTIONS_VS"

[node name="DegubSettings" parent="MarginContainer/VBoxContainer" instance=ExtResource( 2 )]
visible = false
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 150.0
margin_right = 578.0
margin_bottom = 670.0

[node name="UINumberBox" parent="MarginContainer/VBoxContainer" instance=ExtResource( 3 )]
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 138.0
margin_right = 578.0
margin_bottom = 172.0
title = "OPTIONS_QT"

[node name="UILanguageSelector" parent="MarginContainer/VBoxContainer" instance=ExtResource( 5 )]
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 176.0
margin_right = 578.0
margin_bottom = 216.0

[node name="Control" type="Control" parent="MarginContainer/VBoxContainer"]
margin_top = 220.0
margin_right = 578.0
margin_bottom = 220.0
size_flags_horizontal = 15
size_flags_vertical = 2

[node name="OpenFolder" type="Button" parent="MarginContainer/VBoxContainer"]
margin_top = 344.0
margin_right = 578.0
margin_bottom = 384.0
custom_colors/font_color_hover = Color( 0.2, 1, 0, 1 )
custom_colors/font_color_pressed = Color( 0, 1, 0.717647, 1 )
custom_fonts/font = ExtResource( 4 )
text = "OPTION_FOLDER"
flat = true

[node name="ApplyButton" type="Button" parent="MarginContainer/VBoxContainer"]
margin_top = 388.0
margin_right = 578.0
margin_bottom = 428.0
custom_colors/font_color_hover = Color( 0.2, 1, 0, 1 )
custom_colors/font_color_pressed = Color( 0, 1, 0.717647, 1 )
custom_fonts/font = ExtResource( 4 )
text = "OPTION_DONE"
flat = true

[node name="Control2" type="Control" parent="MarginContainer/VBoxContainer"]
margin_top = 432.0
margin_right = 578.0
margin_bottom = 432.0

[node name="ResetSettings" type="Button" parent="MarginContainer/VBoxContainer"]
margin_top = 436.0
margin_right = 578.0
margin_bottom = 476.0
custom_colors/font_color_hover = Color( 0.2, 1, 0, 1 )
custom_colors/font_color_pressed = Color( 0, 1, 0.717647, 1 )
custom_fonts/font = ExtResource( 4 )
text = "OPTION_RETURN"
flat = true

[node name="QuitButton" type="Button" parent="MarginContainer/VBoxContainer"]
margin_top = 480.0
margin_right = 578.0
margin_bottom = 520.0
custom_colors/font_color_hover = Color( 0.2, 1, 0, 1 )
custom_colors/font_color_pressed = Color( 0, 1, 0.717647, 1 )
custom_fonts/font = ExtResource( 4 )
text = "QUIT"
flat = true

[node name="Label" type="Label" parent="."]
margin_left = -180.0
margin_top = -8.0
margin_right = -5.0
margin_bottom = 172.0
autowrap = true

[connection signal="resolution_changed" from="MarginContainer/VBoxContainer/UIResolutionSelector" to="." method="_on_UIResolutionSelector_resolution_changed"]
[connection signal="toggled" from="MarginContainer/VBoxContainer/UIFullScreenCheckbox" to="." method="_on_UIFullScreenCheckbox_toggled"]
[connection signal="toggled" from="MarginContainer/VBoxContainer/UIVSyncsCheckbox2" to="." method="_on_UIVSyncsCheckbox2_toggled"]
[connection signal="toggled" from="MarginContainer/VBoxContainer/DegubSettings" to="." method="_on_DegubSettings_toggled"]
[connection signal="changed" from="MarginContainer/VBoxContainer/UINumberBox" to="." method="_on_UINumberBox_changed"]
[connection signal="language_changed" from="MarginContainer/VBoxContainer/UILanguageSelector" to="." method="_on_UILanguageSelector_language_changed"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/OpenFolder" to="." method="_on_OpenFolder_pressed"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/ApplyButton" to="." method="_on_ApplyButton_pressed"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/ResetSettings" to="." method="_on_ResetSettings_pressed"]
[connection signal="pressed" from="MarginContainer/VBoxContainer/QuitButton" to="." method="_on_QuitButton_pressed"]
